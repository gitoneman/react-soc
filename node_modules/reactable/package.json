{
  "name": "reactable",
  "version": "0.10.1",
  "description": "Fast, flexible, simple data tables in React",
  "main": "./build/reactable.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/glittershark/reactable.git"
  },
  "bugs": {
    "url": "https://github.com/glittershark/reactable/issues"
  },
  "author": {
    "name": "Griffin Smith"
  },
  "license": "MIT",
  "homepage": "https://github.com/glittershark/reactable",
  "scripts": {
    "test": "./node_modules/grunt-cli/bin/grunt testOnce"
  },
  "peerDependencies": {
    "react": "*"
  },
  "devDependencies": {
    "grunt": "^0.4.4",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-karma": "^0.8.2",
    "grunt-react": "^0.10.0",
    "karma": "^0.12.9",
    "karma-chrome-launcher": "^0.1.3",
    "karma-firefox-launcher": "^0.1.3",
    "karma-mocha": "^0.1.3",
    "karma-phantomjs-launcher": "^0.1.4",
    "karma-spec-reporter": "0.0.12",
    "mocha": "^1.18.2"
  },
  "keywords": [
    "react-component",
    "react",
    "table",
    "data-tables"
  ],
  "readme": "Reactable [![Build Status](https://travis-ci.org/glittershark/reactable.svg?branch=master)](https://travis-ci.org/glittershark/reactable)\n=========\n\nFast, flexible, and simple data tables in React.\n\nReactable allows you to display tabular data client-side, and provides sorting,\nfiltering, and pagination over that data. It uses the power of [React.js][react]\nto do all this very, very quickly, and provides an API that makes simple things\neasy, while trying to get out of your way as much as possible if you want to do\nsomething complicated or unconventional.\n\n[react]: http://facebook.github.io/react/\n\nThis project is currently alpha-stage, which means the API may or may not be\nunstable and there might be hidden bugs lurking around any corner. I'll try to\ntag any releases with breaking changes, however, and the more people who use\nthis the faster we can get to 1.0!\n\n**Note:** Version [0.9.8][0.9.8] is the last version that supports React 0.11 -\nas of version 0.10 (this version) Reactable will only continue to support React\n0.12 and higher.\n\n[0.9.8]: https://github.com/glittershark/reactable/tree/0.9.8\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Further Customization](#further-customization)\n  - [Even More Customization](#even-more-customization)\n  - [Manually specifying columns](#manually-specifying-columns)\n  - [Preventing escaping of HTML](#preventing-escaping-of-html)\n  - [Pagination](#pagination)\n  - [Sorting](#sorting)\n  - [Filtering](#filtering)\n\n\n## Installation\n\n**Using Bower:**\n\n```\nbower install [--save] reactable\n```\n\nOr, you can just download the raw file\n[here](https://github.com/glittershark/reactable/raw/master/build/reactable.js).\n\nThat file can be used either as an AMD module, as a CommonJS module in Node, or,\nif neither are supported, will register the Reactable object as a property of\nthe `window` object.\n\nKeep in mind that Reactable depends on the latest version of React (0.12),\n**with addons**. That can be downloaded [here][download]\n\n[download]: http://facebook.github.io/react/downloads.html\n\n## Usage\n\nThe simplest example:\n\n```jsx\nvar Table = Reactable.Table;\nReact.renderComponent(\n    <Table className=\"table\" data={[\n        { Name: 'Griffin Smith', Age: 18 },\n        { Age: 23,  Name: 'Lee Salminen' },\n        { Age: 28, Position: 'Developer' },\n    ]} />,\n    document.getElementById('table')\n);\n```\n\nWhile pretty basic, this example demonstrates a couple things:\n- Columns in the data array can be in any order, and you can omit any you like\n- Regular React DOM attributes such as className will pass-through to the\n  rendered `<table>`\n- Data values can be any type with a `toString()` method\n\n### Further Customization\n\nYou can also manually build up your rows using `Reactable.Tr` nested in a table,\nalso using the `data` prop, but this time containing only one javascript object.\nThis approach can be freely combined with the `data` property on the `<Table>`,\nand is useful if you want to specify per-row attributes such as classes, like so:\n\n```jsx\nvar Table = Reactable.Table,\n    Tr = Reactable.Tr;\n\nReact.renderComponent(\n    <Table className=\"table\" data={[\n        { name: 'Row one', content: 'These are regular data rows' },\n        { name: 'Row two', content: 'They work like above' },\n    ]} >\n        <Tr className=\"special-row\"\n            data={{ name: 'Other Row' , content: 'This is a different row' }} />\n    </Table>,\n    document.getElementById('table')\n);\n```\n\n### Even More Customization\n\nIf you want to customize the rendering of individual columns, you can go a level\ndeeper by embedding a `Reactable.Td` inside your `Reactable.Tr`. These have the\nrequired `column` property, and an optional `value` property if you want to\ncustomize the data that's used for sorting and filtering - if the latter isn't\nspecified, the data used will default to the `Td`'s children.\n\nExample:\n\n```jsx\nvar Table = Reactable.Table,\n    Tr = Reactable.Tr,\n    Td = Reactable.Td;\n\nReact.renderComponent(\n    <Table className=\"table\" id=\"table\">\n        <Tr>\n            <Td column=\"Name\" data=\"Griffin Smith\">\n                <b>Griffin Smith</b>\n            </Td>\n            <Td column=\"Age\">18</Td>\n        </Tr>\n        <Tr>\n            <Td column=\"Name\">Lee Salminen</Td>\n            <Td column=\"Age\">23</Td>\n        </Tr>\n        <Tr>\n            <Td column=\"Position\">Developer</Td>\n            <Td column=\"Age\">28</Td>\n        </Tr>\n    </Table>,\n    document.getElementById('table')\n);\n```\n\n### Manually specifying columns\n\nTo override the automatic grabbing of the column list from the attributes of the\npassed `data` objects, you can pass a `columns` property to the `<Table>`\ncomponent. This can be either:\n\n- An array of strings, in which case only the given properties will be included\n  as columns in the rendered table.\n- An array of objects, each of which must have a `key` and `label` property. The\n  `key` property is the attribute of the row object from which to retrieve\n  value, and the `label` is the text to render in the column header row.\n\n### Preventing escaping of HTML\n\nIf you don't want to go all the way down the JSX rabbit hole to render\nindividual cells as HTML, and you know your source data is safe, you can wrap\nstrings in `Reactable.unsafe` to prevent their content from being escaped, like\nso:\n\n```jsx\nvar Table = Reactable.Table,\n    unsafe = Reactable.unsafe;\n\nReact.renderComponent(\n    <Table className=\"table\" id=\"table\" data={[\n        {\n            'Name': unsafe('<b>Griffin Smith</b>'),\n            'Github': unsafe('<a href=\"https://github.com/glittershark\"><img src=\"https://d2k1ftgv7pobq7.cloudfront.net/images/services/8cab38550d1f23032facde191031d024/github.png\"></a>')\n        },\n        {\n            'Name': unsafe('<b>Ian Zhang</b>'),\n            'Github': unsafe('<a href=\"https://github.com/lofiinterstate\"><img src=\"https://d2k1ftgv7pobq7.cloudfront.net/images/services/8cab38550d1f23032facde191031d024/github.png\"></a>')\n        },\n    ]}/>,\n    document.getElementById('table')\n);\n```\n\nYou can also pass in `unsafe` strings as column labels or in a `<Reactable.Th>`\n\n### Pagination\n\nYou can also use pagination, by just specifying an `itemsPerPage` argument to the\n`<Table>` component. For example:\n\n```jsx\n<Table className=\"table\" data={[\n    { Name: 'Griffin Smith', Age: '18' },\n    { Age: '23',  Name: 'Lee Salminen' },\n    { Age: '28', Position: 'Developer' },\n    { Name: 'Griffin Smith', Age: '18' },\n    { Age: '30',  Name: 'Test Person' },\n    { Name: 'Another Test', Age: '26', Position: 'Developer' },\n    { Name: 'Third Test', Age: '19', Position: 'Salesperson' },\n    { Age: '23',  Name: 'End of this Page', Position: 'CEO' },\n]} itemsPerPage={4} />\n```\n\n### Sorting\n\nTo enable sorting on all columns, just specify `sortable={true}` on the\n`<Table>` component. For further customization, ie disabling sort or using a\ncustom sort function on a per-column basis, you can pass an array to `sortable`,\nwhich contains either string column names or column objects.\n\nWe've pre-built some sort functions for you.\n\n- `CaseInsensitive` will sort strings alphabetically regardless of\n  capitalization (e.g. Joe Smith === joe smith)\n- `Date` will sort dates using JavaScript's native Date parser (e.g. 4/20/2014\n  12:05 PM)\n- `Currency` will sort USD format (e.g. $1,000.00)\n- `Numeric` will parse integer-like strings as integers (e.g. \"1\")\n- `NumericInteger` will parse integer strings (use `Numeric` if you might have floats)\n\nTo specify a custom sort function, use the following structure for the column\nobject:\n\n```jsx\n\n{column: 'Column Name', sortFunction: function(a, b){} }\n```\n\nYou can also specify a default sort by passing in either a column name by\nitself, or an object with a column and a `direction` paramenter of either `asc`\nor `desc`.  If no direction is specified, the default sort will be ascending.\nExample:\n\n```jsx\n\n{column: 'Column Name', direction: 'asc' }\n```\n\nCombined example:\n\n```jsx\n<Table className=\"table\" id=\"table\" data={[\n    { Name: 'Lee Salminen', Age: '23', Position: 'Programmer'},\n    { Name: 'Griffin Smith', Age: '18', Position: 'Engineer'},\n    { Name: 'Ian Zhang', Age: '28', Position: 'Developer'}\n]}\nsortable={[\n    {\n        column: 'Name',\n        sortFunction: function(a, b){\n            // Sort by last name\n            var nameA = a.split(' ');\n            var nameB = b.split(' ');\n\n            return nameA[1].localeCompare(nameB[1]);\n        }\n    },\n    'Age',\n    'Position'\n]}\ndefaultSort={{column: 'Age', direction: 'desc'}}/>\n```\n### Filtering\n\nYou can do simple case-insensitive filtering by specifying a filterable property\non the table.  This property should contain a list of columns which the filter\nis performed on.  If the filterable property is provided, then an input box with\nclass reactable-filter-input will be prepended to the thead of the table.\n\nExample:\n\n```jsx\n<Table className=\"table\" id=\"table\" data={[\n    {'State': 'New York', 'Description': 'this is some text', 'Tag': 'new'},\n    {'State': 'New Mexico', 'Description': 'lorem ipsum', 'Tag': 'old'},\n    {'State': 'Colorado', 'Description': 'new description that shouldn\\'t match filter', 'Tag': 'old'},\n    {'State': 'Alaska', 'Description': 'bacon', 'Tag': 'renewed'},\n]} filterable={['State', 'Tag']} />\n```\n\nThere is also a `filterBy()` function on the component itself which takes a \nsingle string and applies that as the filtered value. It can be used like so:\n\n```jsx\nvar table = React.renderComponent(\n  <Table className=\"table\" id=\"table\" data={[\n      {'State': 'New York', 'Description': 'this is some text', 'Tag': 'new'},\n      {'State': 'New Mexico', 'Description': 'lorem ipsum', 'Tag': 'old'},\n      {'State': 'Colorado', 'Description': 'new description that shouldn\\'t match filter', 'Tag': 'old'},\n      {'State': 'Alaska', 'Description': 'bacon', 'Tag': 'renewed'},\n  ]} filterable={['State', 'Tag']} />,\n  document.getElementById('table')\n);\n\ntable.filterBy('new');\n```\n\nThis can be useful if you want to roll your own filtering input field outside of\nReactable.\n",
  "readmeFilename": "README.md",
  "_id": "reactable@0.10.1",
  "_shasum": "4bddb592886a4368075a81ecb74274926ce02ccc",
  "_from": "reactable@",
  "_resolved": "https://registry.npmjs.org/reactable/-/reactable-0.10.1.tgz"
}
